// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osmap_2eproto;
class SerializedDescriptor;
struct SerializedDescriptorDefaultTypeInternal;
extern SerializedDescriptorDefaultTypeInternal _SerializedDescriptor_default_instance_;
class SerializedFeature;
struct SerializedFeatureDefaultTypeInternal;
extern SerializedFeatureDefaultTypeInternal _SerializedFeature_default_instance_;
class SerializedK;
struct SerializedKDefaultTypeInternal;
extern SerializedKDefaultTypeInternal _SerializedK_default_instance_;
class SerializedKArray;
struct SerializedKArrayDefaultTypeInternal;
extern SerializedKArrayDefaultTypeInternal _SerializedKArray_default_instance_;
class SerializedKeyframe;
struct SerializedKeyframeDefaultTypeInternal;
extern SerializedKeyframeDefaultTypeInternal _SerializedKeyframe_default_instance_;
class SerializedKeyframeArray;
struct SerializedKeyframeArrayDefaultTypeInternal;
extern SerializedKeyframeArrayDefaultTypeInternal _SerializedKeyframeArray_default_instance_;
class SerializedKeyframeFeatures;
struct SerializedKeyframeFeaturesDefaultTypeInternal;
extern SerializedKeyframeFeaturesDefaultTypeInternal _SerializedKeyframeFeatures_default_instance_;
class SerializedKeyframeFeaturesArray;
struct SerializedKeyframeFeaturesArrayDefaultTypeInternal;
extern SerializedKeyframeFeaturesArrayDefaultTypeInternal _SerializedKeyframeFeaturesArray_default_instance_;
class SerializedKeypoint;
struct SerializedKeypointDefaultTypeInternal;
extern SerializedKeypointDefaultTypeInternal _SerializedKeypoint_default_instance_;
class SerializedMappoint;
struct SerializedMappointDefaultTypeInternal;
extern SerializedMappointDefaultTypeInternal _SerializedMappoint_default_instance_;
class SerializedMappointArray;
struct SerializedMappointArrayDefaultTypeInternal;
extern SerializedMappointArrayDefaultTypeInternal _SerializedMappointArray_default_instance_;
class SerializedPose;
struct SerializedPoseDefaultTypeInternal;
extern SerializedPoseDefaultTypeInternal _SerializedPose_default_instance_;
class SerializedPosition;
struct SerializedPositionDefaultTypeInternal;
extern SerializedPositionDefaultTypeInternal _SerializedPosition_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SerializedDescriptor* Arena::CreateMaybeMessage<::SerializedDescriptor>(Arena*);
template<> ::SerializedFeature* Arena::CreateMaybeMessage<::SerializedFeature>(Arena*);
template<> ::SerializedK* Arena::CreateMaybeMessage<::SerializedK>(Arena*);
template<> ::SerializedKArray* Arena::CreateMaybeMessage<::SerializedKArray>(Arena*);
template<> ::SerializedKeyframe* Arena::CreateMaybeMessage<::SerializedKeyframe>(Arena*);
template<> ::SerializedKeyframeArray* Arena::CreateMaybeMessage<::SerializedKeyframeArray>(Arena*);
template<> ::SerializedKeyframeFeatures* Arena::CreateMaybeMessage<::SerializedKeyframeFeatures>(Arena*);
template<> ::SerializedKeyframeFeaturesArray* Arena::CreateMaybeMessage<::SerializedKeyframeFeaturesArray>(Arena*);
template<> ::SerializedKeypoint* Arena::CreateMaybeMessage<::SerializedKeypoint>(Arena*);
template<> ::SerializedMappoint* Arena::CreateMaybeMessage<::SerializedMappoint>(Arena*);
template<> ::SerializedMappointArray* Arena::CreateMaybeMessage<::SerializedMappointArray>(Arena*);
template<> ::SerializedPose* Arena::CreateMaybeMessage<::SerializedPose>(Arena*);
template<> ::SerializedPosition* Arena::CreateMaybeMessage<::SerializedPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SerializedDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedDescriptor) */ {
 public:
  inline SerializedDescriptor() : SerializedDescriptor(nullptr) {}
  ~SerializedDescriptor() override;
  explicit constexpr SerializedDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedDescriptor(const SerializedDescriptor& from);
  SerializedDescriptor(SerializedDescriptor&& from) noexcept
    : SerializedDescriptor() {
    *this = ::std::move(from);
  }

  inline SerializedDescriptor& operator=(const SerializedDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedDescriptor& operator=(SerializedDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedDescriptor* internal_default_instance() {
    return reinterpret_cast<const SerializedDescriptor*>(
               &_SerializedDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedDescriptor& a, SerializedDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedDescriptor";
  }
  protected:
  explicit SerializedDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // repeated fixed32 block = 1;
  int block_size() const;
  private:
  int _internal_block_size() const;
  public:
  void clear_block();
  private:
  uint32_t _internal_block(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_block() const;
  void _internal_add_block(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_block();
  public:
  uint32_t block(int index) const;
  void set_block(int index, uint32_t value);
  void add_block(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      block() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_block();

  // @@protoc_insertion_point(class_scope:SerializedDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedPose) */ {
 public:
  inline SerializedPose() : SerializedPose(nullptr) {}
  ~SerializedPose() override;
  explicit constexpr SerializedPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedPose(const SerializedPose& from);
  SerializedPose(SerializedPose&& from) noexcept
    : SerializedPose() {
    *this = ::std::move(from);
  }

  inline SerializedPose& operator=(const SerializedPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedPose& operator=(SerializedPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedPose* internal_default_instance() {
    return reinterpret_cast<const SerializedPose*>(
               &_SerializedPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedPose& a, SerializedPose& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedPose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedPose";
  }
  protected:
  explicit SerializedPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated float element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  private:
  float _internal_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_element() const;
  void _internal_add_element(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_element();
  public:
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:SerializedPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedPosition) */ {
 public:
  inline SerializedPosition() : SerializedPosition(nullptr) {}
  ~SerializedPosition() override;
  explicit constexpr SerializedPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedPosition(const SerializedPosition& from);
  SerializedPosition(SerializedPosition&& from) noexcept
    : SerializedPosition() {
    *this = ::std::move(from);
  }

  inline SerializedPosition& operator=(const SerializedPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedPosition& operator=(SerializedPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedPosition* internal_default_instance() {
    return reinterpret_cast<const SerializedPosition*>(
               &_SerializedPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializedPosition& a, SerializedPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedPosition";
  }
  protected:
  explicit SerializedPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeypoint) */ {
 public:
  inline SerializedKeypoint() : SerializedKeypoint(nullptr) {}
  ~SerializedKeypoint() override;
  explicit constexpr SerializedKeypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeypoint(const SerializedKeypoint& from);
  SerializedKeypoint(SerializedKeypoint&& from) noexcept
    : SerializedKeypoint() {
    *this = ::std::move(from);
  }

  inline SerializedKeypoint& operator=(const SerializedKeypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeypoint& operator=(SerializedKeypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeypoint* internal_default_instance() {
    return reinterpret_cast<const SerializedKeypoint*>(
               &_SerializedKeypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializedKeypoint& a, SerializedKeypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKeypoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeypoint";
  }
  protected:
  explicit SerializedKeypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtxFieldNumber = 1,
    kPtyFieldNumber = 2,
    kAngleFieldNumber = 3,
    kOctaveFieldNumber = 4,
  };
  // float ptx = 1;
  void clear_ptx();
  float ptx() const;
  void set_ptx(float value);
  private:
  float _internal_ptx() const;
  void _internal_set_ptx(float value);
  public:

  // float pty = 2;
  void clear_pty();
  float pty() const;
  void set_pty(float value);
  private:
  float _internal_pty() const;
  void _internal_set_pty(float value);
  public:

  // float angle = 3;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // float octave = 4;
  void clear_octave();
  float octave() const;
  void set_octave(float value);
  private:
  float _internal_octave() const;
  void _internal_set_octave(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedKeypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float ptx_;
  float pty_;
  float angle_;
  float octave_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedK) */ {
 public:
  inline SerializedK() : SerializedK(nullptr) {}
  ~SerializedK() override;
  explicit constexpr SerializedK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedK(const SerializedK& from);
  SerializedK(SerializedK&& from) noexcept
    : SerializedK() {
    *this = ::std::move(from);
  }

  inline SerializedK& operator=(const SerializedK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedK& operator=(SerializedK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedK& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedK* internal_default_instance() {
    return reinterpret_cast<const SerializedK*>(
               &_SerializedK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SerializedK& a, SerializedK& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedK& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedK";
  }
  protected:
  explicit SerializedK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
    kCxFieldNumber = 3,
    kCyFieldNumber = 4,
  };
  // float fx = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fy = 2;
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // float cx = 3;
  void clear_cx();
  float cx() const;
  void set_cx(float value);
  private:
  float _internal_cx() const;
  void _internal_set_cx(float value);
  public:

  // float cy = 4;
  void clear_cy();
  float cy() const;
  void set_cy(float value);
  private:
  float _internal_cy() const;
  void _internal_set_cy(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fx_;
  float fy_;
  float cx_;
  float cy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKArray) */ {
 public:
  inline SerializedKArray() : SerializedKArray(nullptr) {}
  ~SerializedKArray() override;
  explicit constexpr SerializedKArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKArray(const SerializedKArray& from);
  SerializedKArray(SerializedKArray&& from) noexcept
    : SerializedKArray() {
    *this = ::std::move(from);
  }

  inline SerializedKArray& operator=(const SerializedKArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKArray& operator=(SerializedKArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKArray* internal_default_instance() {
    return reinterpret_cast<const SerializedKArray*>(
               &_SerializedKArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SerializedKArray& a, SerializedKArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKArray";
  }
  protected:
  explicit SerializedKArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
  };
  // repeated .SerializedK k = 1;
  int k_size() const;
  private:
  int _internal_k_size() const;
  public:
  void clear_k();
  ::SerializedK* mutable_k(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >*
      mutable_k();
  private:
  const ::SerializedK& _internal_k(int index) const;
  ::SerializedK* _internal_add_k();
  public:
  const ::SerializedK& k(int index) const;
  ::SerializedK* add_k();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >&
      k() const;

  // @@protoc_insertion_point(class_scope:SerializedKArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK > k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedMappoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedMappoint) */ {
 public:
  inline SerializedMappoint() : SerializedMappoint(nullptr) {}
  ~SerializedMappoint() override;
  explicit constexpr SerializedMappoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedMappoint(const SerializedMappoint& from);
  SerializedMappoint(SerializedMappoint&& from) noexcept
    : SerializedMappoint() {
    *this = ::std::move(from);
  }

  inline SerializedMappoint& operator=(const SerializedMappoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedMappoint& operator=(SerializedMappoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedMappoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedMappoint* internal_default_instance() {
    return reinterpret_cast<const SerializedMappoint*>(
               &_SerializedMappoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SerializedMappoint& a, SerializedMappoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedMappoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedMappoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedMappoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedMappoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedMappoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedMappoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedMappoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedMappoint";
  }
  protected:
  explicit SerializedMappoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kBriefdescriptorFieldNumber = 5,
    kIdFieldNumber = 1,
    kVisibleFieldNumber = 3,
    kFoundFieldNumber = 4,
  };
  // .SerializedPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::SerializedPosition& position() const;
  PROTOBUF_NODISCARD ::SerializedPosition* release_position();
  ::SerializedPosition* mutable_position();
  void set_allocated_position(::SerializedPosition* position);
  private:
  const ::SerializedPosition& _internal_position() const;
  ::SerializedPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::SerializedPosition* position);
  ::SerializedPosition* unsafe_arena_release_position();

  // .SerializedDescriptor briefdescriptor = 5;
  bool has_briefdescriptor() const;
  private:
  bool _internal_has_briefdescriptor() const;
  public:
  void clear_briefdescriptor();
  const ::SerializedDescriptor& briefdescriptor() const;
  PROTOBUF_NODISCARD ::SerializedDescriptor* release_briefdescriptor();
  ::SerializedDescriptor* mutable_briefdescriptor();
  void set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor);
  private:
  const ::SerializedDescriptor& _internal_briefdescriptor() const;
  ::SerializedDescriptor* _internal_mutable_briefdescriptor();
  public:
  void unsafe_arena_set_allocated_briefdescriptor(
      ::SerializedDescriptor* briefdescriptor);
  ::SerializedDescriptor* unsafe_arena_release_briefdescriptor();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float visible = 3;
  void clear_visible();
  float visible() const;
  void set_visible(float value);
  private:
  float _internal_visible() const;
  void _internal_set_visible(float value);
  public:

  // float found = 4;
  void clear_found();
  float found() const;
  void set_found(float value);
  private:
  float _internal_found() const;
  void _internal_set_found(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedMappoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SerializedPosition* position_;
  ::SerializedDescriptor* briefdescriptor_;
  uint32_t id_;
  float visible_;
  float found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedMappointArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedMappointArray) */ {
 public:
  inline SerializedMappointArray() : SerializedMappointArray(nullptr) {}
  ~SerializedMappointArray() override;
  explicit constexpr SerializedMappointArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedMappointArray(const SerializedMappointArray& from);
  SerializedMappointArray(SerializedMappointArray&& from) noexcept
    : SerializedMappointArray() {
    *this = ::std::move(from);
  }

  inline SerializedMappointArray& operator=(const SerializedMappointArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedMappointArray& operator=(SerializedMappointArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedMappointArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedMappointArray* internal_default_instance() {
    return reinterpret_cast<const SerializedMappointArray*>(
               &_SerializedMappointArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SerializedMappointArray& a, SerializedMappointArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedMappointArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedMappointArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedMappointArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedMappointArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedMappointArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedMappointArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedMappointArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedMappointArray";
  }
  protected:
  explicit SerializedMappointArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappointFieldNumber = 1,
  };
  // repeated .SerializedMappoint mappoint = 1;
  int mappoint_size() const;
  private:
  int _internal_mappoint_size() const;
  public:
  void clear_mappoint();
  ::SerializedMappoint* mutable_mappoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >*
      mutable_mappoint();
  private:
  const ::SerializedMappoint& _internal_mappoint(int index) const;
  ::SerializedMappoint* _internal_add_mappoint();
  public:
  const ::SerializedMappoint& mappoint(int index) const;
  ::SerializedMappoint* add_mappoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >&
      mappoint() const;

  // @@protoc_insertion_point(class_scope:SerializedMappointArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint > mappoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframe) */ {
 public:
  inline SerializedKeyframe() : SerializedKeyframe(nullptr) {}
  ~SerializedKeyframe() override;
  explicit constexpr SerializedKeyframe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframe(const SerializedKeyframe& from);
  SerializedKeyframe(SerializedKeyframe&& from) noexcept
    : SerializedKeyframe() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframe& operator=(const SerializedKeyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframe& operator=(SerializedKeyframe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframe& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframe* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframe*>(
               &_SerializedKeyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SerializedKeyframe& a, SerializedKeyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKeyframe& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframe";
  }
  protected:
  explicit SerializedKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopedgesidsFieldNumber = 5,
    kPoseFieldNumber = 2,
    kKmatrixFieldNumber = 3,
    kIdFieldNumber = 1,
    kKindexFieldNumber = 4,
    kTimestampFieldNumber = 6,
  };
  // repeated uint32 loopedgesids = 5;
  int loopedgesids_size() const;
  private:
  int _internal_loopedgesids_size() const;
  public:
  void clear_loopedgesids();
  private:
  uint32_t _internal_loopedgesids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_loopedgesids() const;
  void _internal_add_loopedgesids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_loopedgesids();
  public:
  uint32_t loopedgesids(int index) const;
  void set_loopedgesids(int index, uint32_t value);
  void add_loopedgesids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      loopedgesids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_loopedgesids();

  // .SerializedPose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::SerializedPose& pose() const;
  PROTOBUF_NODISCARD ::SerializedPose* release_pose();
  ::SerializedPose* mutable_pose();
  void set_allocated_pose(::SerializedPose* pose);
  private:
  const ::SerializedPose& _internal_pose() const;
  ::SerializedPose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::SerializedPose* pose);
  ::SerializedPose* unsafe_arena_release_pose();

  // .SerializedK kmatrix = 3;
  bool has_kmatrix() const;
  private:
  bool _internal_has_kmatrix() const;
  public:
  void clear_kmatrix();
  const ::SerializedK& kmatrix() const;
  PROTOBUF_NODISCARD ::SerializedK* release_kmatrix();
  ::SerializedK* mutable_kmatrix();
  void set_allocated_kmatrix(::SerializedK* kmatrix);
  private:
  const ::SerializedK& _internal_kmatrix() const;
  ::SerializedK* _internal_mutable_kmatrix();
  public:
  void unsafe_arena_set_allocated_kmatrix(
      ::SerializedK* kmatrix);
  ::SerializedK* unsafe_arena_release_kmatrix();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 kindex = 4;
  void clear_kindex();
  uint32_t kindex() const;
  void set_kindex(uint32_t value);
  private:
  uint32_t _internal_kindex() const;
  void _internal_set_kindex(uint32_t value);
  public:

  // double timestamp = 6;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedKeyframe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > loopedgesids_;
  mutable std::atomic<int> _loopedgesids_cached_byte_size_;
  ::SerializedPose* pose_;
  ::SerializedK* kmatrix_;
  uint32_t id_;
  uint32_t kindex_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframeArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframeArray) */ {
 public:
  inline SerializedKeyframeArray() : SerializedKeyframeArray(nullptr) {}
  ~SerializedKeyframeArray() override;
  explicit constexpr SerializedKeyframeArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframeArray(const SerializedKeyframeArray& from);
  SerializedKeyframeArray(SerializedKeyframeArray&& from) noexcept
    : SerializedKeyframeArray() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframeArray& operator=(const SerializedKeyframeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframeArray& operator=(SerializedKeyframeArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframeArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframeArray* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframeArray*>(
               &_SerializedKeyframeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SerializedKeyframeArray& a, SerializedKeyframeArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframeArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframeArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframeArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframeArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframeArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKeyframeArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframeArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframeArray";
  }
  protected:
  explicit SerializedKeyframeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // repeated .SerializedKeyframe keyframe = 1;
  int keyframe_size() const;
  private:
  int _internal_keyframe_size() const;
  public:
  void clear_keyframe();
  ::SerializedKeyframe* mutable_keyframe(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >*
      mutable_keyframe();
  private:
  const ::SerializedKeyframe& _internal_keyframe(int index) const;
  ::SerializedKeyframe* _internal_add_keyframe();
  public:
  const ::SerializedKeyframe& keyframe(int index) const;
  ::SerializedKeyframe* add_keyframe();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >&
      keyframe() const;

  // @@protoc_insertion_point(class_scope:SerializedKeyframeArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe > keyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedFeature) */ {
 public:
  inline SerializedFeature() : SerializedFeature(nullptr) {}
  ~SerializedFeature() override;
  explicit constexpr SerializedFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedFeature(const SerializedFeature& from);
  SerializedFeature(SerializedFeature&& from) noexcept
    : SerializedFeature() {
    *this = ::std::move(from);
  }

  inline SerializedFeature& operator=(const SerializedFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedFeature& operator=(SerializedFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedFeature* internal_default_instance() {
    return reinterpret_cast<const SerializedFeature*>(
               &_SerializedFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SerializedFeature& a, SerializedFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedFeature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedFeature";
  }
  protected:
  explicit SerializedFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointFieldNumber = 3,
    kBriefdescriptorFieldNumber = 4,
    kMappointIdFieldNumber = 2,
  };
  // .SerializedKeypoint keypoint = 3;
  bool has_keypoint() const;
  private:
  bool _internal_has_keypoint() const;
  public:
  void clear_keypoint();
  const ::SerializedKeypoint& keypoint() const;
  PROTOBUF_NODISCARD ::SerializedKeypoint* release_keypoint();
  ::SerializedKeypoint* mutable_keypoint();
  void set_allocated_keypoint(::SerializedKeypoint* keypoint);
  private:
  const ::SerializedKeypoint& _internal_keypoint() const;
  ::SerializedKeypoint* _internal_mutable_keypoint();
  public:
  void unsafe_arena_set_allocated_keypoint(
      ::SerializedKeypoint* keypoint);
  ::SerializedKeypoint* unsafe_arena_release_keypoint();

  // .SerializedDescriptor briefdescriptor = 4;
  bool has_briefdescriptor() const;
  private:
  bool _internal_has_briefdescriptor() const;
  public:
  void clear_briefdescriptor();
  const ::SerializedDescriptor& briefdescriptor() const;
  PROTOBUF_NODISCARD ::SerializedDescriptor* release_briefdescriptor();
  ::SerializedDescriptor* mutable_briefdescriptor();
  void set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor);
  private:
  const ::SerializedDescriptor& _internal_briefdescriptor() const;
  ::SerializedDescriptor* _internal_mutable_briefdescriptor();
  public:
  void unsafe_arena_set_allocated_briefdescriptor(
      ::SerializedDescriptor* briefdescriptor);
  ::SerializedDescriptor* unsafe_arena_release_briefdescriptor();

  // uint32 mappoint_id = 2;
  void clear_mappoint_id();
  uint32_t mappoint_id() const;
  void set_mappoint_id(uint32_t value);
  private:
  uint32_t _internal_mappoint_id() const;
  void _internal_set_mappoint_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SerializedKeypoint* keypoint_;
  ::SerializedDescriptor* briefdescriptor_;
  uint32_t mappoint_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframeFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframeFeatures) */ {
 public:
  inline SerializedKeyframeFeatures() : SerializedKeyframeFeatures(nullptr) {}
  ~SerializedKeyframeFeatures() override;
  explicit constexpr SerializedKeyframeFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframeFeatures(const SerializedKeyframeFeatures& from);
  SerializedKeyframeFeatures(SerializedKeyframeFeatures&& from) noexcept
    : SerializedKeyframeFeatures() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframeFeatures& operator=(const SerializedKeyframeFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframeFeatures& operator=(SerializedKeyframeFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframeFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframeFeatures* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframeFeatures*>(
               &_SerializedKeyframeFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SerializedKeyframeFeatures& a, SerializedKeyframeFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframeFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframeFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframeFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframeFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframeFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKeyframeFeatures& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframeFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframeFeatures";
  }
  protected:
  explicit SerializedKeyframeFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 2,
    kKeyframeIdFieldNumber = 1,
  };
  // repeated .SerializedFeature feature = 2;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::SerializedFeature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >*
      mutable_feature();
  private:
  const ::SerializedFeature& _internal_feature(int index) const;
  ::SerializedFeature* _internal_add_feature();
  public:
  const ::SerializedFeature& feature(int index) const;
  ::SerializedFeature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >&
      feature() const;

  // uint32 keyframe_id = 1;
  void clear_keyframe_id();
  uint32_t keyframe_id() const;
  void set_keyframe_id(uint32_t value);
  private:
  uint32_t _internal_keyframe_id() const;
  void _internal_set_keyframe_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedKeyframeFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature > feature_;
  uint32_t keyframe_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframeFeaturesArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframeFeaturesArray) */ {
 public:
  inline SerializedKeyframeFeaturesArray() : SerializedKeyframeFeaturesArray(nullptr) {}
  ~SerializedKeyframeFeaturesArray() override;
  explicit constexpr SerializedKeyframeFeaturesArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframeFeaturesArray(const SerializedKeyframeFeaturesArray& from);
  SerializedKeyframeFeaturesArray(SerializedKeyframeFeaturesArray&& from) noexcept
    : SerializedKeyframeFeaturesArray() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframeFeaturesArray& operator=(const SerializedKeyframeFeaturesArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframeFeaturesArray& operator=(SerializedKeyframeFeaturesArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframeFeaturesArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframeFeaturesArray* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframeFeaturesArray*>(
               &_SerializedKeyframeFeaturesArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SerializedKeyframeFeaturesArray& a, SerializedKeyframeFeaturesArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframeFeaturesArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframeFeaturesArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframeFeaturesArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframeFeaturesArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframeFeaturesArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKeyframeFeaturesArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframeFeaturesArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframeFeaturesArray";
  }
  protected:
  explicit SerializedKeyframeFeaturesArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // repeated .SerializedKeyframeFeatures feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::SerializedKeyframeFeatures* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >*
      mutable_feature();
  private:
  const ::SerializedKeyframeFeatures& _internal_feature(int index) const;
  ::SerializedKeyframeFeatures* _internal_add_feature();
  public:
  const ::SerializedKeyframeFeatures& feature(int index) const;
  ::SerializedKeyframeFeatures* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >&
      feature() const;

  // @@protoc_insertion_point(class_scope:SerializedKeyframeFeaturesArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures > feature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedDescriptor

// repeated fixed32 block = 1;
inline int SerializedDescriptor::_internal_block_size() const {
  return block_.size();
}
inline int SerializedDescriptor::block_size() const {
  return _internal_block_size();
}
inline void SerializedDescriptor::clear_block() {
  block_.Clear();
}
inline uint32_t SerializedDescriptor::_internal_block(int index) const {
  return block_.Get(index);
}
inline uint32_t SerializedDescriptor::block(int index) const {
  // @@protoc_insertion_point(field_get:SerializedDescriptor.block)
  return _internal_block(index);
}
inline void SerializedDescriptor::set_block(int index, uint32_t value) {
  block_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedDescriptor.block)
}
inline void SerializedDescriptor::_internal_add_block(uint32_t value) {
  block_.Add(value);
}
inline void SerializedDescriptor::add_block(uint32_t value) {
  _internal_add_block(value);
  // @@protoc_insertion_point(field_add:SerializedDescriptor.block)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedDescriptor::_internal_block() const {
  return block_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedDescriptor::block() const {
  // @@protoc_insertion_point(field_list:SerializedDescriptor.block)
  return _internal_block();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedDescriptor::_internal_mutable_block() {
  return &block_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedDescriptor::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:SerializedDescriptor.block)
  return _internal_mutable_block();
}

// -------------------------------------------------------------------

// SerializedPose

// repeated float element = 1;
inline int SerializedPose::_internal_element_size() const {
  return element_.size();
}
inline int SerializedPose::element_size() const {
  return _internal_element_size();
}
inline void SerializedPose::clear_element() {
  element_.Clear();
}
inline float SerializedPose::_internal_element(int index) const {
  return element_.Get(index);
}
inline float SerializedPose::element(int index) const {
  // @@protoc_insertion_point(field_get:SerializedPose.element)
  return _internal_element(index);
}
inline void SerializedPose::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedPose.element)
}
inline void SerializedPose::_internal_add_element(float value) {
  element_.Add(value);
}
inline void SerializedPose::add_element(float value) {
  _internal_add_element(value);
  // @@protoc_insertion_point(field_add:SerializedPose.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedPose::_internal_element() const {
  return element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedPose::element() const {
  // @@protoc_insertion_point(field_list:SerializedPose.element)
  return _internal_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedPose::_internal_mutable_element() {
  return &element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedPose::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:SerializedPose.element)
  return _internal_mutable_element();
}

// -------------------------------------------------------------------

// SerializedPosition

// float x = 1;
inline void SerializedPosition::clear_x() {
  x_ = 0;
}
inline float SerializedPosition::_internal_x() const {
  return x_;
}
inline float SerializedPosition::x() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.x)
  return _internal_x();
}
inline void SerializedPosition::_internal_set_x(float value) {
  
  x_ = value;
}
inline void SerializedPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SerializedPosition.x)
}

// float y = 2;
inline void SerializedPosition::clear_y() {
  y_ = 0;
}
inline float SerializedPosition::_internal_y() const {
  return y_;
}
inline float SerializedPosition::y() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.y)
  return _internal_y();
}
inline void SerializedPosition::_internal_set_y(float value) {
  
  y_ = value;
}
inline void SerializedPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SerializedPosition.y)
}

// float z = 3;
inline void SerializedPosition::clear_z() {
  z_ = 0;
}
inline float SerializedPosition::_internal_z() const {
  return z_;
}
inline float SerializedPosition::z() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.z)
  return _internal_z();
}
inline void SerializedPosition::_internal_set_z(float value) {
  
  z_ = value;
}
inline void SerializedPosition::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SerializedPosition.z)
}

// -------------------------------------------------------------------

// SerializedKeypoint

// float ptx = 1;
inline void SerializedKeypoint::clear_ptx() {
  ptx_ = 0;
}
inline float SerializedKeypoint::_internal_ptx() const {
  return ptx_;
}
inline float SerializedKeypoint::ptx() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.ptx)
  return _internal_ptx();
}
inline void SerializedKeypoint::_internal_set_ptx(float value) {
  
  ptx_ = value;
}
inline void SerializedKeypoint::set_ptx(float value) {
  _internal_set_ptx(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.ptx)
}

// float pty = 2;
inline void SerializedKeypoint::clear_pty() {
  pty_ = 0;
}
inline float SerializedKeypoint::_internal_pty() const {
  return pty_;
}
inline float SerializedKeypoint::pty() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.pty)
  return _internal_pty();
}
inline void SerializedKeypoint::_internal_set_pty(float value) {
  
  pty_ = value;
}
inline void SerializedKeypoint::set_pty(float value) {
  _internal_set_pty(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.pty)
}

// float angle = 3;
inline void SerializedKeypoint::clear_angle() {
  angle_ = 0;
}
inline float SerializedKeypoint::_internal_angle() const {
  return angle_;
}
inline float SerializedKeypoint::angle() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.angle)
  return _internal_angle();
}
inline void SerializedKeypoint::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void SerializedKeypoint::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.angle)
}

// float octave = 4;
inline void SerializedKeypoint::clear_octave() {
  octave_ = 0;
}
inline float SerializedKeypoint::_internal_octave() const {
  return octave_;
}
inline float SerializedKeypoint::octave() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.octave)
  return _internal_octave();
}
inline void SerializedKeypoint::_internal_set_octave(float value) {
  
  octave_ = value;
}
inline void SerializedKeypoint::set_octave(float value) {
  _internal_set_octave(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.octave)
}

// -------------------------------------------------------------------

// SerializedK

// float fx = 1;
inline void SerializedK::clear_fx() {
  fx_ = 0;
}
inline float SerializedK::_internal_fx() const {
  return fx_;
}
inline float SerializedK::fx() const {
  // @@protoc_insertion_point(field_get:SerializedK.fx)
  return _internal_fx();
}
inline void SerializedK::_internal_set_fx(float value) {
  
  fx_ = value;
}
inline void SerializedK::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:SerializedK.fx)
}

// float fy = 2;
inline void SerializedK::clear_fy() {
  fy_ = 0;
}
inline float SerializedK::_internal_fy() const {
  return fy_;
}
inline float SerializedK::fy() const {
  // @@protoc_insertion_point(field_get:SerializedK.fy)
  return _internal_fy();
}
inline void SerializedK::_internal_set_fy(float value) {
  
  fy_ = value;
}
inline void SerializedK::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:SerializedK.fy)
}

// float cx = 3;
inline void SerializedK::clear_cx() {
  cx_ = 0;
}
inline float SerializedK::_internal_cx() const {
  return cx_;
}
inline float SerializedK::cx() const {
  // @@protoc_insertion_point(field_get:SerializedK.cx)
  return _internal_cx();
}
inline void SerializedK::_internal_set_cx(float value) {
  
  cx_ = value;
}
inline void SerializedK::set_cx(float value) {
  _internal_set_cx(value);
  // @@protoc_insertion_point(field_set:SerializedK.cx)
}

// float cy = 4;
inline void SerializedK::clear_cy() {
  cy_ = 0;
}
inline float SerializedK::_internal_cy() const {
  return cy_;
}
inline float SerializedK::cy() const {
  // @@protoc_insertion_point(field_get:SerializedK.cy)
  return _internal_cy();
}
inline void SerializedK::_internal_set_cy(float value) {
  
  cy_ = value;
}
inline void SerializedK::set_cy(float value) {
  _internal_set_cy(value);
  // @@protoc_insertion_point(field_set:SerializedK.cy)
}

// -------------------------------------------------------------------

// SerializedKArray

// repeated .SerializedK k = 1;
inline int SerializedKArray::_internal_k_size() const {
  return k_.size();
}
inline int SerializedKArray::k_size() const {
  return _internal_k_size();
}
inline void SerializedKArray::clear_k() {
  k_.Clear();
}
inline ::SerializedK* SerializedKArray::mutable_k(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKArray.k)
  return k_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >*
SerializedKArray::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKArray.k)
  return &k_;
}
inline const ::SerializedK& SerializedKArray::_internal_k(int index) const {
  return k_.Get(index);
}
inline const ::SerializedK& SerializedKArray::k(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKArray.k)
  return _internal_k(index);
}
inline ::SerializedK* SerializedKArray::_internal_add_k() {
  return k_.Add();
}
inline ::SerializedK* SerializedKArray::add_k() {
  ::SerializedK* _add = _internal_add_k();
  // @@protoc_insertion_point(field_add:SerializedKArray.k)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >&
SerializedKArray::k() const {
  // @@protoc_insertion_point(field_list:SerializedKArray.k)
  return k_;
}

// -------------------------------------------------------------------

// SerializedMappoint

// uint32 id = 1;
inline void SerializedMappoint::clear_id() {
  id_ = 0u;
}
inline uint32_t SerializedMappoint::_internal_id() const {
  return id_;
}
inline uint32_t SerializedMappoint::id() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.id)
  return _internal_id();
}
inline void SerializedMappoint::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void SerializedMappoint::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SerializedMappoint.id)
}

// .SerializedPosition position = 2;
inline bool SerializedMappoint::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SerializedMappoint::has_position() const {
  return _internal_has_position();
}
inline void SerializedMappoint::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::SerializedPosition& SerializedMappoint::_internal_position() const {
  const ::SerializedPosition* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedPosition&>(
      ::_SerializedPosition_default_instance_);
}
inline const ::SerializedPosition& SerializedMappoint::position() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.position)
  return _internal_position();
}
inline void SerializedMappoint::unsafe_arena_set_allocated_position(
    ::SerializedPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedMappoint.position)
}
inline ::SerializedPosition* SerializedMappoint::release_position() {
  
  ::SerializedPosition* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedPosition* SerializedMappoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:SerializedMappoint.position)
  
  ::SerializedPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::SerializedPosition* SerializedMappoint::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedPosition>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::SerializedPosition* SerializedMappoint::mutable_position() {
  ::SerializedPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:SerializedMappoint.position)
  return _msg;
}
inline void SerializedMappoint::set_allocated_position(::SerializedPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerializedPosition>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:SerializedMappoint.position)
}

// float visible = 3;
inline void SerializedMappoint::clear_visible() {
  visible_ = 0;
}
inline float SerializedMappoint::_internal_visible() const {
  return visible_;
}
inline float SerializedMappoint::visible() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.visible)
  return _internal_visible();
}
inline void SerializedMappoint::_internal_set_visible(float value) {
  
  visible_ = value;
}
inline void SerializedMappoint::set_visible(float value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:SerializedMappoint.visible)
}

// float found = 4;
inline void SerializedMappoint::clear_found() {
  found_ = 0;
}
inline float SerializedMappoint::_internal_found() const {
  return found_;
}
inline float SerializedMappoint::found() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.found)
  return _internal_found();
}
inline void SerializedMappoint::_internal_set_found(float value) {
  
  found_ = value;
}
inline void SerializedMappoint::set_found(float value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:SerializedMappoint.found)
}

// .SerializedDescriptor briefdescriptor = 5;
inline bool SerializedMappoint::_internal_has_briefdescriptor() const {
  return this != internal_default_instance() && briefdescriptor_ != nullptr;
}
inline bool SerializedMappoint::has_briefdescriptor() const {
  return _internal_has_briefdescriptor();
}
inline void SerializedMappoint::clear_briefdescriptor() {
  if (GetArenaForAllocation() == nullptr && briefdescriptor_ != nullptr) {
    delete briefdescriptor_;
  }
  briefdescriptor_ = nullptr;
}
inline const ::SerializedDescriptor& SerializedMappoint::_internal_briefdescriptor() const {
  const ::SerializedDescriptor* p = briefdescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedDescriptor&>(
      ::_SerializedDescriptor_default_instance_);
}
inline const ::SerializedDescriptor& SerializedMappoint::briefdescriptor() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.briefdescriptor)
  return _internal_briefdescriptor();
}
inline void SerializedMappoint::unsafe_arena_set_allocated_briefdescriptor(
    ::SerializedDescriptor* briefdescriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(briefdescriptor_);
  }
  briefdescriptor_ = briefdescriptor;
  if (briefdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedMappoint.briefdescriptor)
}
inline ::SerializedDescriptor* SerializedMappoint::release_briefdescriptor() {
  
  ::SerializedDescriptor* temp = briefdescriptor_;
  briefdescriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedDescriptor* SerializedMappoint::unsafe_arena_release_briefdescriptor() {
  // @@protoc_insertion_point(field_release:SerializedMappoint.briefdescriptor)
  
  ::SerializedDescriptor* temp = briefdescriptor_;
  briefdescriptor_ = nullptr;
  return temp;
}
inline ::SerializedDescriptor* SerializedMappoint::_internal_mutable_briefdescriptor() {
  
  if (briefdescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedDescriptor>(GetArenaForAllocation());
    briefdescriptor_ = p;
  }
  return briefdescriptor_;
}
inline ::SerializedDescriptor* SerializedMappoint::mutable_briefdescriptor() {
  ::SerializedDescriptor* _msg = _internal_mutable_briefdescriptor();
  // @@protoc_insertion_point(field_mutable:SerializedMappoint.briefdescriptor)
  return _msg;
}
inline void SerializedMappoint::set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete briefdescriptor_;
  }
  if (briefdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerializedDescriptor>::GetOwningArena(briefdescriptor);
    if (message_arena != submessage_arena) {
      briefdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, briefdescriptor, submessage_arena);
    }
    
  } else {
    
  }
  briefdescriptor_ = briefdescriptor;
  // @@protoc_insertion_point(field_set_allocated:SerializedMappoint.briefdescriptor)
}

// -------------------------------------------------------------------

// SerializedMappointArray

// repeated .SerializedMappoint mappoint = 1;
inline int SerializedMappointArray::_internal_mappoint_size() const {
  return mappoint_.size();
}
inline int SerializedMappointArray::mappoint_size() const {
  return _internal_mappoint_size();
}
inline void SerializedMappointArray::clear_mappoint() {
  mappoint_.Clear();
}
inline ::SerializedMappoint* SerializedMappointArray::mutable_mappoint(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedMappointArray.mappoint)
  return mappoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >*
SerializedMappointArray::mutable_mappoint() {
  // @@protoc_insertion_point(field_mutable_list:SerializedMappointArray.mappoint)
  return &mappoint_;
}
inline const ::SerializedMappoint& SerializedMappointArray::_internal_mappoint(int index) const {
  return mappoint_.Get(index);
}
inline const ::SerializedMappoint& SerializedMappointArray::mappoint(int index) const {
  // @@protoc_insertion_point(field_get:SerializedMappointArray.mappoint)
  return _internal_mappoint(index);
}
inline ::SerializedMappoint* SerializedMappointArray::_internal_add_mappoint() {
  return mappoint_.Add();
}
inline ::SerializedMappoint* SerializedMappointArray::add_mappoint() {
  ::SerializedMappoint* _add = _internal_add_mappoint();
  // @@protoc_insertion_point(field_add:SerializedMappointArray.mappoint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >&
SerializedMappointArray::mappoint() const {
  // @@protoc_insertion_point(field_list:SerializedMappointArray.mappoint)
  return mappoint_;
}

// -------------------------------------------------------------------

// SerializedKeyframe

// uint32 id = 1;
inline void SerializedKeyframe::clear_id() {
  id_ = 0u;
}
inline uint32_t SerializedKeyframe::_internal_id() const {
  return id_;
}
inline uint32_t SerializedKeyframe::id() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.id)
  return _internal_id();
}
inline void SerializedKeyframe::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void SerializedKeyframe::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.id)
}

// .SerializedPose pose = 2;
inline bool SerializedKeyframe::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool SerializedKeyframe::has_pose() const {
  return _internal_has_pose();
}
inline void SerializedKeyframe::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::SerializedPose& SerializedKeyframe::_internal_pose() const {
  const ::SerializedPose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedPose&>(
      ::_SerializedPose_default_instance_);
}
inline const ::SerializedPose& SerializedKeyframe::pose() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.pose)
  return _internal_pose();
}
inline void SerializedKeyframe::unsafe_arena_set_allocated_pose(
    ::SerializedPose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedKeyframe.pose)
}
inline ::SerializedPose* SerializedKeyframe::release_pose() {
  
  ::SerializedPose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedPose* SerializedKeyframe::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:SerializedKeyframe.pose)
  
  ::SerializedPose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::SerializedPose* SerializedKeyframe::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedPose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::SerializedPose* SerializedKeyframe::mutable_pose() {
  ::SerializedPose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:SerializedKeyframe.pose)
  return _msg;
}
inline void SerializedKeyframe::set_allocated_pose(::SerializedPose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerializedPose>::GetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:SerializedKeyframe.pose)
}

// .SerializedK kmatrix = 3;
inline bool SerializedKeyframe::_internal_has_kmatrix() const {
  return this != internal_default_instance() && kmatrix_ != nullptr;
}
inline bool SerializedKeyframe::has_kmatrix() const {
  return _internal_has_kmatrix();
}
inline void SerializedKeyframe::clear_kmatrix() {
  if (GetArenaForAllocation() == nullptr && kmatrix_ != nullptr) {
    delete kmatrix_;
  }
  kmatrix_ = nullptr;
}
inline const ::SerializedK& SerializedKeyframe::_internal_kmatrix() const {
  const ::SerializedK* p = kmatrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedK&>(
      ::_SerializedK_default_instance_);
}
inline const ::SerializedK& SerializedKeyframe::kmatrix() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.kmatrix)
  return _internal_kmatrix();
}
inline void SerializedKeyframe::unsafe_arena_set_allocated_kmatrix(
    ::SerializedK* kmatrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmatrix_);
  }
  kmatrix_ = kmatrix;
  if (kmatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedKeyframe.kmatrix)
}
inline ::SerializedK* SerializedKeyframe::release_kmatrix() {
  
  ::SerializedK* temp = kmatrix_;
  kmatrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedK* SerializedKeyframe::unsafe_arena_release_kmatrix() {
  // @@protoc_insertion_point(field_release:SerializedKeyframe.kmatrix)
  
  ::SerializedK* temp = kmatrix_;
  kmatrix_ = nullptr;
  return temp;
}
inline ::SerializedK* SerializedKeyframe::_internal_mutable_kmatrix() {
  
  if (kmatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedK>(GetArenaForAllocation());
    kmatrix_ = p;
  }
  return kmatrix_;
}
inline ::SerializedK* SerializedKeyframe::mutable_kmatrix() {
  ::SerializedK* _msg = _internal_mutable_kmatrix();
  // @@protoc_insertion_point(field_mutable:SerializedKeyframe.kmatrix)
  return _msg;
}
inline void SerializedKeyframe::set_allocated_kmatrix(::SerializedK* kmatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete kmatrix_;
  }
  if (kmatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerializedK>::GetOwningArena(kmatrix);
    if (message_arena != submessage_arena) {
      kmatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmatrix, submessage_arena);
    }
    
  } else {
    
  }
  kmatrix_ = kmatrix;
  // @@protoc_insertion_point(field_set_allocated:SerializedKeyframe.kmatrix)
}

// uint32 kindex = 4;
inline void SerializedKeyframe::clear_kindex() {
  kindex_ = 0u;
}
inline uint32_t SerializedKeyframe::_internal_kindex() const {
  return kindex_;
}
inline uint32_t SerializedKeyframe::kindex() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.kindex)
  return _internal_kindex();
}
inline void SerializedKeyframe::_internal_set_kindex(uint32_t value) {
  
  kindex_ = value;
}
inline void SerializedKeyframe::set_kindex(uint32_t value) {
  _internal_set_kindex(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.kindex)
}

// repeated uint32 loopedgesids = 5;
inline int SerializedKeyframe::_internal_loopedgesids_size() const {
  return loopedgesids_.size();
}
inline int SerializedKeyframe::loopedgesids_size() const {
  return _internal_loopedgesids_size();
}
inline void SerializedKeyframe::clear_loopedgesids() {
  loopedgesids_.Clear();
}
inline uint32_t SerializedKeyframe::_internal_loopedgesids(int index) const {
  return loopedgesids_.Get(index);
}
inline uint32_t SerializedKeyframe::loopedgesids(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.loopedgesids)
  return _internal_loopedgesids(index);
}
inline void SerializedKeyframe::set_loopedgesids(int index, uint32_t value) {
  loopedgesids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.loopedgesids)
}
inline void SerializedKeyframe::_internal_add_loopedgesids(uint32_t value) {
  loopedgesids_.Add(value);
}
inline void SerializedKeyframe::add_loopedgesids(uint32_t value) {
  _internal_add_loopedgesids(value);
  // @@protoc_insertion_point(field_add:SerializedKeyframe.loopedgesids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedKeyframe::_internal_loopedgesids() const {
  return loopedgesids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedKeyframe::loopedgesids() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframe.loopedgesids)
  return _internal_loopedgesids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedKeyframe::_internal_mutable_loopedgesids() {
  return &loopedgesids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedKeyframe::mutable_loopedgesids() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframe.loopedgesids)
  return _internal_mutable_loopedgesids();
}

// double timestamp = 6;
inline void SerializedKeyframe::clear_timestamp() {
  timestamp_ = 0;
}
inline double SerializedKeyframe::_internal_timestamp() const {
  return timestamp_;
}
inline double SerializedKeyframe::timestamp() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.timestamp)
  return _internal_timestamp();
}
inline void SerializedKeyframe::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void SerializedKeyframe::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.timestamp)
}

// -------------------------------------------------------------------

// SerializedKeyframeArray

// repeated .SerializedKeyframe keyframe = 1;
inline int SerializedKeyframeArray::_internal_keyframe_size() const {
  return keyframe_.size();
}
inline int SerializedKeyframeArray::keyframe_size() const {
  return _internal_keyframe_size();
}
inline void SerializedKeyframeArray::clear_keyframe() {
  keyframe_.Clear();
}
inline ::SerializedKeyframe* SerializedKeyframeArray::mutable_keyframe(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeArray.keyframe)
  return keyframe_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >*
SerializedKeyframeArray::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeArray.keyframe)
  return &keyframe_;
}
inline const ::SerializedKeyframe& SerializedKeyframeArray::_internal_keyframe(int index) const {
  return keyframe_.Get(index);
}
inline const ::SerializedKeyframe& SerializedKeyframeArray::keyframe(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeArray.keyframe)
  return _internal_keyframe(index);
}
inline ::SerializedKeyframe* SerializedKeyframeArray::_internal_add_keyframe() {
  return keyframe_.Add();
}
inline ::SerializedKeyframe* SerializedKeyframeArray::add_keyframe() {
  ::SerializedKeyframe* _add = _internal_add_keyframe();
  // @@protoc_insertion_point(field_add:SerializedKeyframeArray.keyframe)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >&
SerializedKeyframeArray::keyframe() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeArray.keyframe)
  return keyframe_;
}

// -------------------------------------------------------------------

// SerializedFeature

// uint32 mappoint_id = 2;
inline void SerializedFeature::clear_mappoint_id() {
  mappoint_id_ = 0u;
}
inline uint32_t SerializedFeature::_internal_mappoint_id() const {
  return mappoint_id_;
}
inline uint32_t SerializedFeature::mappoint_id() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.mappoint_id)
  return _internal_mappoint_id();
}
inline void SerializedFeature::_internal_set_mappoint_id(uint32_t value) {
  
  mappoint_id_ = value;
}
inline void SerializedFeature::set_mappoint_id(uint32_t value) {
  _internal_set_mappoint_id(value);
  // @@protoc_insertion_point(field_set:SerializedFeature.mappoint_id)
}

// .SerializedKeypoint keypoint = 3;
inline bool SerializedFeature::_internal_has_keypoint() const {
  return this != internal_default_instance() && keypoint_ != nullptr;
}
inline bool SerializedFeature::has_keypoint() const {
  return _internal_has_keypoint();
}
inline void SerializedFeature::clear_keypoint() {
  if (GetArenaForAllocation() == nullptr && keypoint_ != nullptr) {
    delete keypoint_;
  }
  keypoint_ = nullptr;
}
inline const ::SerializedKeypoint& SerializedFeature::_internal_keypoint() const {
  const ::SerializedKeypoint* p = keypoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedKeypoint&>(
      ::_SerializedKeypoint_default_instance_);
}
inline const ::SerializedKeypoint& SerializedFeature::keypoint() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.keypoint)
  return _internal_keypoint();
}
inline void SerializedFeature::unsafe_arena_set_allocated_keypoint(
    ::SerializedKeypoint* keypoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keypoint_);
  }
  keypoint_ = keypoint;
  if (keypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedFeature.keypoint)
}
inline ::SerializedKeypoint* SerializedFeature::release_keypoint() {
  
  ::SerializedKeypoint* temp = keypoint_;
  keypoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedKeypoint* SerializedFeature::unsafe_arena_release_keypoint() {
  // @@protoc_insertion_point(field_release:SerializedFeature.keypoint)
  
  ::SerializedKeypoint* temp = keypoint_;
  keypoint_ = nullptr;
  return temp;
}
inline ::SerializedKeypoint* SerializedFeature::_internal_mutable_keypoint() {
  
  if (keypoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedKeypoint>(GetArenaForAllocation());
    keypoint_ = p;
  }
  return keypoint_;
}
inline ::SerializedKeypoint* SerializedFeature::mutable_keypoint() {
  ::SerializedKeypoint* _msg = _internal_mutable_keypoint();
  // @@protoc_insertion_point(field_mutable:SerializedFeature.keypoint)
  return _msg;
}
inline void SerializedFeature::set_allocated_keypoint(::SerializedKeypoint* keypoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete keypoint_;
  }
  if (keypoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerializedKeypoint>::GetOwningArena(keypoint);
    if (message_arena != submessage_arena) {
      keypoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keypoint, submessage_arena);
    }
    
  } else {
    
  }
  keypoint_ = keypoint;
  // @@protoc_insertion_point(field_set_allocated:SerializedFeature.keypoint)
}

// .SerializedDescriptor briefdescriptor = 4;
inline bool SerializedFeature::_internal_has_briefdescriptor() const {
  return this != internal_default_instance() && briefdescriptor_ != nullptr;
}
inline bool SerializedFeature::has_briefdescriptor() const {
  return _internal_has_briefdescriptor();
}
inline void SerializedFeature::clear_briefdescriptor() {
  if (GetArenaForAllocation() == nullptr && briefdescriptor_ != nullptr) {
    delete briefdescriptor_;
  }
  briefdescriptor_ = nullptr;
}
inline const ::SerializedDescriptor& SerializedFeature::_internal_briefdescriptor() const {
  const ::SerializedDescriptor* p = briefdescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedDescriptor&>(
      ::_SerializedDescriptor_default_instance_);
}
inline const ::SerializedDescriptor& SerializedFeature::briefdescriptor() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.briefdescriptor)
  return _internal_briefdescriptor();
}
inline void SerializedFeature::unsafe_arena_set_allocated_briefdescriptor(
    ::SerializedDescriptor* briefdescriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(briefdescriptor_);
  }
  briefdescriptor_ = briefdescriptor;
  if (briefdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedFeature.briefdescriptor)
}
inline ::SerializedDescriptor* SerializedFeature::release_briefdescriptor() {
  
  ::SerializedDescriptor* temp = briefdescriptor_;
  briefdescriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedDescriptor* SerializedFeature::unsafe_arena_release_briefdescriptor() {
  // @@protoc_insertion_point(field_release:SerializedFeature.briefdescriptor)
  
  ::SerializedDescriptor* temp = briefdescriptor_;
  briefdescriptor_ = nullptr;
  return temp;
}
inline ::SerializedDescriptor* SerializedFeature::_internal_mutable_briefdescriptor() {
  
  if (briefdescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedDescriptor>(GetArenaForAllocation());
    briefdescriptor_ = p;
  }
  return briefdescriptor_;
}
inline ::SerializedDescriptor* SerializedFeature::mutable_briefdescriptor() {
  ::SerializedDescriptor* _msg = _internal_mutable_briefdescriptor();
  // @@protoc_insertion_point(field_mutable:SerializedFeature.briefdescriptor)
  return _msg;
}
inline void SerializedFeature::set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete briefdescriptor_;
  }
  if (briefdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SerializedDescriptor>::GetOwningArena(briefdescriptor);
    if (message_arena != submessage_arena) {
      briefdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, briefdescriptor, submessage_arena);
    }
    
  } else {
    
  }
  briefdescriptor_ = briefdescriptor;
  // @@protoc_insertion_point(field_set_allocated:SerializedFeature.briefdescriptor)
}

// -------------------------------------------------------------------

// SerializedKeyframeFeatures

// uint32 keyframe_id = 1;
inline void SerializedKeyframeFeatures::clear_keyframe_id() {
  keyframe_id_ = 0u;
}
inline uint32_t SerializedKeyframeFeatures::_internal_keyframe_id() const {
  return keyframe_id_;
}
inline uint32_t SerializedKeyframeFeatures::keyframe_id() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeatures.keyframe_id)
  return _internal_keyframe_id();
}
inline void SerializedKeyframeFeatures::_internal_set_keyframe_id(uint32_t value) {
  
  keyframe_id_ = value;
}
inline void SerializedKeyframeFeatures::set_keyframe_id(uint32_t value) {
  _internal_set_keyframe_id(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframeFeatures.keyframe_id)
}

// repeated .SerializedFeature feature = 2;
inline int SerializedKeyframeFeatures::_internal_feature_size() const {
  return feature_.size();
}
inline int SerializedKeyframeFeatures::feature_size() const {
  return _internal_feature_size();
}
inline void SerializedKeyframeFeatures::clear_feature() {
  feature_.Clear();
}
inline ::SerializedFeature* SerializedKeyframeFeatures::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeFeatures.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >*
SerializedKeyframeFeatures::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeFeatures.feature)
  return &feature_;
}
inline const ::SerializedFeature& SerializedKeyframeFeatures::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline const ::SerializedFeature& SerializedKeyframeFeatures::feature(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeatures.feature)
  return _internal_feature(index);
}
inline ::SerializedFeature* SerializedKeyframeFeatures::_internal_add_feature() {
  return feature_.Add();
}
inline ::SerializedFeature* SerializedKeyframeFeatures::add_feature() {
  ::SerializedFeature* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:SerializedKeyframeFeatures.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >&
SerializedKeyframeFeatures::feature() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeFeatures.feature)
  return feature_;
}

// -------------------------------------------------------------------

// SerializedKeyframeFeaturesArray

// repeated .SerializedKeyframeFeatures feature = 1;
inline int SerializedKeyframeFeaturesArray::_internal_feature_size() const {
  return feature_.size();
}
inline int SerializedKeyframeFeaturesArray::feature_size() const {
  return _internal_feature_size();
}
inline void SerializedKeyframeFeaturesArray::clear_feature() {
  feature_.Clear();
}
inline ::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeFeaturesArray.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >*
SerializedKeyframeFeaturesArray::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeFeaturesArray.feature)
  return &feature_;
}
inline const ::SerializedKeyframeFeatures& SerializedKeyframeFeaturesArray::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline const ::SerializedKeyframeFeatures& SerializedKeyframeFeaturesArray::feature(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeaturesArray.feature)
  return _internal_feature(index);
}
inline ::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::_internal_add_feature() {
  return feature_.Add();
}
inline ::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::add_feature() {
  ::SerializedKeyframeFeatures* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:SerializedKeyframeFeaturesArray.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >&
SerializedKeyframeFeaturesArray::feature() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeFeaturesArray.feature)
  return feature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osmap_2eproto
